1. this.setState({count: this.state.count + 1}) - The problem with updating state in this way is that it can essentially result in a race condition and updates can be missed. This is best illustrated in an example. Given a counter is starting on 0 and is incremented on click of a button using this code, if the button is clicked 4 times in quick succession, the user would expect the counter to display 4. However depending on the speed with which the button was clicked this may not be the case. This is due to the fact that React state updates are very fast, but not instantaneous, and there is a certain amount of lag time between the update call and the update being completed. When you call this function it will trigger the update to begin, update the count, and trigger a rerender with the new state of count = 1. If you have clicked the button a second time before that rerender and state update has occurred the second click may be lost. A better, and more consistent, way of updating in this way is to pass a function to setState, rather than an object. Ex: this.setState((state) => state.count + 1). This method will ensure the correct count is always kept. 

2. Redux - 